pragma solidity ^0.4.25;

// Contract for user asking the magic.ethball a yes/no question 

contract ethballQuestion {
    
    string question; // define question variable 
    uint public constant COST_PER_QUESTION = 0 ether; // define cost of asking question 
    address seeker; // define address variable
  
    event newQuestion( // define the event to be emitted and the variable that will change
        string question
    );
    
    constructor () public { // function to define the seeker by the sender
        seeker = msg.sender;
   }
    
    function getQuestion(string _question) public { // function to get new question
        question = _question; // define the question variable
        newQuestion(_question); // emit event newQuestion
    }
    
    function announceQuestion() view public returns (string) {
        return (question);
    }
    
     // Check the value of ether sent to the contract,
    // if it is greater than 0 (not free!), refund the excess value back to sender

    modifier checkValue() {
        uint amountToRefund; msg.value - COST_PER_QUESTION;
        if (amountToRefund > 0) {
            if (!msg.sender.send(amountToRefund)) {
            revert();
            }
        }
        require (amountToRefund >= 0);
        _;
    }
    
}  
